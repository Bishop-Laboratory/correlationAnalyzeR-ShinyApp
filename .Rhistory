getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
data <- correlationAnalyzeR::geneVsGeneListAnalyze(pairedGenesList = list("ATM" = "HALLMARK_OXIDATIVE_PHOSPHORYLATION"), returnDataOnly = T)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
TERM2GENE <- correlationAnalyzeR::getTERM2GENE()
View(TERM2GENE)
geneVsGeneListGenesList <- list("ATM" = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
TERM2GENE$gs_name[TERM2GENE$gs_name == geneVsGeneListGenesList[[1]]]
TERM2GENE$gene_symbol[TERM2GENE$gs_name == geneVsGeneListGenesList[[1]]]
geneVsGeneListGenesList[[1]] <- TERM2GENE$gene_symbol[TERM2GENE$gs_name ==
geneVsGeneListGenesList[[1]]]
geneVsGeneListGenesList
if (length(geneVsGeneListGenesList[[1]]) > 500) {
msg <- paste0("Topology mode cannot process more than 500 genes. If you would ",
"like to test more, please use the R-package.")
showNotification(ui = msg,
duration = 8, type = 'error')
}
length(geneVsGeneListGenesList[[1]])
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
getAvailableGenes()
getAvailableGenes()
getAvailableGenes()
getAvailableGenes()
getAvailableGenes()
getAvailableGenes()
getAvailableGenes()
install.packages("pool")
library(pool)
library(pool)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
pool::poolClose(pool)
# Load connections
pool <- pool::dbPool(
drv = RMySQL::MySQL(),
user = "public-rds-user", port = 3306,
dbname="bishoplabdb",
password='public-user-password',
host="bishoplabdb.cyss3bq5juml.us-west-2.rds.amazonaws.com"
)
correlationAnalyzeR::getAvailableGenes(pool = pool)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
pool::poolClose(pool)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
pool::poolClose(pool)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
pool
is.null(pool)
res <- correlationAnalyzeR::analyzeGenesetTopology(genesOfInterest = c("ATM", "BRCA2", "BRCA1"), returnDataOnly = T, crossComparisonType = c("PCA"), pool = pool)
pool
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
pool::poolClose(pool)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
correlationAnalyzeR::getTERM2GENE(GSEA_Type = "complex",
Species = "hsapiens")
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
cleanRes <- cleanInputs(secondaryGenes = secondaryGenes,
selectedSpecies = species,
sampleType = sampleType,
tissueType = tissueType,
GlobalData = GlobalData,
session = session,
pool = pool)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
popify(h3(), title = "Title", placement = "left", content = "hey")
popify(h3(), title = "Title", placement = "left", content = "hey", options = list("delay" = 599))
popify(h3(), title = "Title", placement = "left", content = "hey", options = list("delay" = 1000))
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
popify(
selectizeInput(inputId = ns("tissueType"), label = "Select tissue type",
choices = c("All"),
multiple = F),
placement = "right",
title = "Select tissue type", options=list(container="body", delay = 3000),
content = paste0('Correlations were processed separately by tissue type. ',
'Select a tissue to extract tissue-specific correlations, ',
'or select "all" to use correlations from all tissues.')
)
popify(
selectizeInput(inputId = "tissueType", label = "Select tissue type",
choices = c("All"),
multiple = F),
placement = "right",
title = "Select tissue type", options=list(container="body", delay = 3000),
content = paste0('Correlations were processed separately by tissue type. ',
'Select a tissue to extract tissue-specific correlations, ',
'or select "all" to use correlations from all tissues.')
)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
popify(
selectizeInput(inputId = "tissueType", label = "Select tissue type",
choices = c("All"),
multiple = F),
placement = "right",
title = "Select tissue type", options=list(container="body", delay = 3000),
content = paste0('Correlations were processed separately by tissue type. ',
'Select a tissue to extract tissue-specific correlations, ',
'or select "all" to use correlations from all tissues.')
)
popify(
selectizeInput(inputId = "id", label = "Select tissue type",
choices = c("All"),
multiple = F),
placement = "right",
title = "Select tissue type", options=list(container="body",
delay = list(show = 2000,
hide = 0)),
content = paste0('Correlations were processed separately by tissue type. ',
'Select a tissue to extract tissue-specific correlations, ',
'or select "all" to use correlations from all tissues.')
)
popify(
selectizeInput(inputId = "ns("tissueType")", label = "Select tissue type",
choices = c("All"),
multiple = F),
placement = "right",
title = "Select tissue type", options=list(container="body",
delay = c(show = 2000,
hide = 0)),
content = paste0('Correlations were processed separately by tissue type. ',
'Select a tissue to extract tissue-specific correlations, ',
'or select "all" to use correlations from all tissues.')
)
popify(
selectizeInput(inputId = "asd", label = "Select tissue type",
choices = c("All"),
multiple = F),
placement = "right",
title = "Select tissue type", options=list(container="body",
delay = c(show = 2000,
hide = 0)),
content = paste0('Correlations were processed separately by tissue type. ',
'Select a tissue to extract tissue-specific correlations, ',
'or select "all" to use correlations from all tissues.')
)
popify(
selectizeInput(inputId = "tissueType", label = "Select tissue type",
choices = c("All"),
multiple = F),
placement = "right",
title = "Select tissue type", options=list(container="body",
delay = '{show = 2000,
hide = 0}'),
content = paste0('Correlations were processed separately by tissue type. ',
'Select a tissue to extract tissue-specific correlations, ',
'or select "all" to use correlations from all tissues.')
)
popify(
selectizeInput(inputId = "tissueType", label = "Select tissue type",
choices = c("All"),
multiple = F),
placement = "right",
title = "Select tissue type", options=list(container="body",
delay = '{show = "2000", hide = "0"}'),
content = paste0('Correlations were processed separately by tissue type. ',
'Select a tissue to extract tissue-specific correlations, ',
'or select "all" to use correlations from all tissues.')
)
popify(
selectizeInput(inputId = "id", label = "Select tissue type",
choices = c("All"),
multiple = F),
placement = "right",
title = "Select tissue type", options=list(container="body",
delay = {show = "2000", hide = "0"}),
content = paste0('Correlations were processed separately by tissue type. ',
'Select a tissue to extract tissue-specific correlations, ',
'or select "all" to use correlations from all tissues.')
)
popify(
selectizeInput(inputId = "tissueType", label = "Select tissue type",
choices = c("All"),
multiple = F),
placement = "right",
title = "Select tissue type", options=list(container="body",
delay = {'show = "2000", hide = "0"'}),
content = paste0('Correlations were processed separately by tissue type. ',
'Select a tissue to extract tissue-specific correlations, ',
'or select "all" to use correlations from all tissues.')
)
popify(
selectizeInput(inputId = "tissueType", label = "Select tissue type",
choices = c("All"),
multiple = F),
placement = "right",
title = "Select tissue type", options=list(container="body",
delay = list(show = 2000,
hide = 0)),
content = paste0('Correlations were processed separately by tissue type. ',
'Select a tissue to extract tissue-specific correlations, ',
'or select "all" to use correlations from all tissues.')
)
HTML('show': "500")
HTML('show: "500"')
HTML('show: "2500", hide: "100"')
popify(
selectizeInput(inputId = "tissueType", label = "Select tissue type",
choices = c("All"),
multiple = F),
placement = "right",
title = "Select tissue type", options=list(container="body",
delay = HTML('show: "2500", hide: "100"')),
content = paste0('Correlations were processed separately by tissue type. ',
'Select a tissue to extract tissue-specific correlations, ',
'or select "all" to use correlations from all tissues.')
)
HTML('show: ', '2500')
HTML('show:', '2500')
popify(
selectizeInput(inputId = "ASD", label = "Select tissue type",
choices = c("All"),
multiple = F),
placement = "right",
title = "Select tissue type", options=list(container="body",
delay = HTML('{show: "2500"}')),
content = paste0('Correlations were processed separately by tissue type. ',
'Select a tissue to extract tissue-specific correlations, ',
'or select "all" to use correlations from all tissues.')
)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
View(createGeneGuide)
pool
pool::poolClose()
pool::poolClose(pool)
# Load connections
pool <- pool::dbPool(
drv = RMySQL::MySQL(),
user = "public-rds-user", port = 3306,
dbname="bishoplabdb",
password='public-user-password',
host="bishoplabdb.cyss3bq5juml.us-west-2.rds.amazonaws.com"
)
print("Pool connected")
pool::poolClose(pool)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
