getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
# Fixes uiNames into colnames
convertToColnames <- function(uiNameRaw) {
colName <- gsub(uiNameRaw, pattern = " - ", replacement = "_")
colName <- gsub(colName, pattern = " ", replacement = "_")
colName <- gsub(colName, pattern = "(|)", replacement = "")
return(colName)
}
uiNameOne <- "RIF1 (bone - normal)"
cols[3] <- convertToColnames(uiNameOne)
convertToColnames(uiNameOne)
colName <- gsub(colName, pattern = "\\(|\\)", replacement = "")
# Fixes uiNames into colnames
convertToColnames <- function(uiNameRaw) {
colName <- gsub(uiNameRaw, pattern = " - ", replacement = "_")
colName <- gsub(colName, pattern = " ", replacement = "_")
colName <- gsub(colName, pattern = "\\(|\\)", replacement = "")
return(colName)
}
convertToColnames(uiNameOne)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(shiny)
library(plotly)
library(heatmaply)
library(DT)
library(shinyBS)
source("scripts/helpers.R")
library(shinyWidgets)
library(shiny)
library(shinythemes)
library(shinyjs)
# Helper functions for shiny apps
require(RMySQL)
require(DBI)
library(shinyBS)
source("scripts/modules.R")
source("scripts/helpers.R")
# # Load data for the global environment
load("data/geneInfo/HS_basicGeneInfo.RData")
load("data/geneInfo/MM_basicGeneInfo.RData")
load("data/humanTissueOptions.RData")
load("data/mouseTissueOptions.RData")
load("data/symbol_suggestions.RData")
humanGeneOptions <- symbolsFinal$alias_symbol[which(symbolsFinal$species == "hsapiens")]
mouseGeneOptions <- symbolsFinal$alias_symbol[which(symbolsFinal$species == "mmusculus")]
# Create global data object
GlobalData <- list("HS_basicGeneInfo" = HS_basicGeneInfo,
'MM_basicGeneInfo' = MM_basicGeneInfo,
'humanGeneOptions' = humanGeneOptions,
'mouseGeneOptions' = mouseGeneOptions,
'humanTissueOptions' = humanTissueOptions,
'mouseTissueOptions' = mouseTissueOptions
)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
res <- correlationAnalyzeR::analyzeGenePairs(genesOfInterest = c("ATM", "SLC3A2"), crossCompareMode = T)
res <- correlationAnalyzeR::analyzeGenePairs(genesOfInterest = c("ATM", "SLC3A2"), crossCompareMode = T, returnDataOnly = T)
View(res)
compResTPM <- res[["singleGeneCrossCompareResults"]]
geneTPMBoxplot1 <- compResTPM[[1]][["TPM_boxPlot"]]
res <- correlationAnalyzeR::analyzeGenePairs(genesOfInterest = c("ATM", "SLC3A2"), crossCompareMode = T, returnDataOnly = T)geneTPMBoxplot1
geneTPMBoxplot1
print(geneTPMBoxplot1)
View(geneTPMBoxplot1)
res <- correlationAnalyzeR::analyzeGenePairs(genesOfInterest = c("BRCA1", "BRCA1"), crossCompareMode = T, returnDataOnly = T)
View(res)
res[["singleGeneCrossCompareResults"]][["BRCA1"]][["TPM_DF"]]
View(res)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
options(shiny.reactlog=TRUE
)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T, display.mode = "showcase")
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T)
# Bug testing
primaryGene <- "BRCA1"
species <- "Human"
sampleType <- "Normal_Tissues"
gseaType <- "Simple"
pval <- .05
GlobalData <- GlobalData
cleanRes <- cleanInputs(primaryGene = primaryGene,
selectedSpecies = species,
sampleType = sampleType,
tissueType = tissueType,
GlobalData = GlobalData,
session = session)
library(shiny)
library(shinythemes)
library(shinyjs)
# Helper functions for shiny apps
require(RMySQL)
require(DBI)
library(shinyBS)
source("scripts/modules.R")
source("scripts/helpers.R")
# # Load data for the global environment
load("data/geneInfo/HS_basicGeneInfo.RData")
load("data/geneInfo/MM_basicGeneInfo.RData")
load("data/humanTissueOptions.RData")
load("data/mouseTissueOptions.RData")
load("data/symbol_suggestions.RData")
humanGeneOptions <- symbolsFinal$alias_symbol[which(symbolsFinal$species == "hsapiens")]
mouseGeneOptions <- symbolsFinal$alias_symbol[which(symbolsFinal$species == "mmusculus")]
# Create global data object
GlobalData <- list("HS_basicGeneInfo" = HS_basicGeneInfo,
'MM_basicGeneInfo' = MM_basicGeneInfo,
'humanGeneOptions' = humanGeneOptions,
'mouseGeneOptions' = mouseGeneOptions,
'humanTissueOptions' = humanTissueOptions,
'mouseTissueOptions' = mouseTissueOptions
)
cleanRes <- cleanInputs(primaryGene = primaryGene,
selectedSpecies = species,
sampleType = sampleType,
tissueType = tissueType,
GlobalData = GlobalData,
session = session)
sampleType <- "normal"
tissueType <- "all"
pval <- .05
GlobalData <- GlobalData
# Validate inputs
shiny::validate(
need(primaryGene != "", "Please select a gene")
)
# Initialize progress object
progress <- shiny::Progress$new()
progress$set(message = "Validating inputs ... ", value = .1)
cleanRes <- cleanInputs(primaryGene = primaryGene,
selectedSpecies = species,
sampleType = sampleType,
tissueType = tissueType,
GlobalData = GlobalData,
session = session)
data <- correlationAnalyzeR::getCorrelationData(Species = cleanRes$selectedSpecies,
Sample_Type = cleanRes$sampleType,
Tissue = cleanRes$tissueType,
geneList = cleanRes$primaryGene)
data <- cbind(rownames(data), data)
colnames(data)[1] <- "geneName"
data <- data[which(data[,1] != cleanRes$primaryGene),]
rownames(data) <- NULL
data <- merge(x = cleanRes$basicGeneInfo, y = data, by = "geneName")
# Enable the download button
res <- list("correlationData" = data,
"species" = species,
"gseaType" = gseaType,
"pval" = pval,
"primaryGene" = primaryGene,
"sampleType" = sampleType,
"tissueType" = tissueType,
"progress" = progress)
# Enable the download button
res <- list("correlationData" = data,
"species" = species,
"gseaType" = gseaType,
"pval" = pval,
"primaryGene" = primaryGene,
"sampleType" = sampleType,
"tissueType" = tissueType)
dataList <- res
species <- dataList[["species"]]
gseaType <- dataList[['gseaType']]
pval <- dataList[['pval']]
sampleType <- dataList[['sampleType']]
tissueType <- dataList[['tissueType']]
correlationData <- dataList[["correlationData"]]
primaryGene <- dataList[["primaryGene"]]
tissueType <- gsub(tissueType, pattern = "0", replacement = " ")
downloadsList <- reactiveValues()
uiName <- paste0(primaryGene, " (",
stringr::str_to_title(tissueType), " - ",
stringr::str_to_title(sampleType), ")")
fileName <- paste0(primaryGene, "_",
tissueType, "_",
sampleType)
uiName
correlationData <- correlationData[order(correlationData[,4], decreasing = T),]
View(correlationData)
downloadsList[["correlationData"]] <- list("content" = correlationData,
"uiName" = paste0(uiName,
" correlation data"),
"file" = ".tsv")
pval <- .05
if (gseaType == "Simple") {
if (species == "Human") {
TERM2GENE <- correlationAnalyzeR::hsapiens_simple_TERM2GENE
} else {
TERM2GENE <- correlationAnalyzeR::mmusculus_simple_TERM2GENE
}
} else {
if (species == "Human") {
TERM2GENE <- correlationAnalyzeR::hsapiens_complex_TERM2GENE
} else {
TERM2GENE <- correlationAnalyzeR::mmusculus_complex_TERM2GENE
}
}
ranks <- correlationData[,4]
names(ranks) <- correlationData[,1]
set.seed(1) # Reproducible
gseaData <- correlationAnalyzeR::myGSEA(ranks = ranks,
nperm = 2000,
TERM2GENE = TERM2GENE,
padjustedCutoff = pval,
returnDataOnly = T,
topPlots = F)
# Check if p cutoff value was raised
eres <- gseaData$eres
View(eres)
minp <- min(eres$p.adjust)
if (minp > pval) {
msg <- paste0("No results returned at p value of ", pval,
". corGSEA p value cutoff was raised to accommodate.")
shiny::showNotification(ui = msg, type = "warning")
}
eresRaw <- eres
downloadsList[['gseaData']] <- list("content" = eresRaw,
"file" = ".tsv",
"uiName" = paste0(uiName,
" corGSEA data"))
colnames(eres)
eres <- eres[which(abs(eres[,5]) > 2),]
eres <- eres[order(eres[,5], decreasing = T),]
eres[,c(5,6,7)] <- apply(eres[,c(5,6,7)], 1:2, round, digits = 7)
eres <- eres[order(eres[,6], decreasing = F),]
eresCor <- eres
eres <- eres[,c(2, 5, 6, 7)]
eresTitles <- eres$Description
eresTitles <- correlationAnalyzeR::fixStrings(eresTitles)
eresTitles[which(nchar(eresTitles) > 45)] <- paste0(substr(eresTitles[which(nchar(eresTitles) > 45)], 1, 41), "...")
s <- 1
id <- eresCor[s,1]
titleID <- eresTitles[s]
genes <- unlist(strsplit(eresCor$core_enrichment[which(eresCor$ID == id)]))
View(eresCor)
genes <- unlist(strsplit(eresCor$core_enrichment[
which(eresCor$ID == id)], split = "/"))
corrDFNow <- correlationData[which(correlationData$geneName %in% genes),]
View(corrDFNow)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T)
corrDFNow2 <- cbind(rep(id, length(corrDFNow$geneName)), corrDFNow)
View(corrDFNow2)
colnames(corrDFNow2)[1]
colnames(corrDFNow2)[1] <- "geneset_ID"
colnames(corrDFNow2)
colnames(corrDFNow2)[5] <- paste0(colnames(corrDFNow2)[5], "_correlation_value")
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T)
avgenes <- correlationAnalyzeR::getAvailableGenes()
TPMGenes <- correlationAnalyzeR::humanGenesTPM
avgenes
avgenes <- avgenes$geneName
TPMGenes
which(avgenes %in% TPMGenes)
which(! avgenes %in% TPMGenes)
avgenes[which(! avgenes %in% TPMGenes)]
which(! TPMGenes %in% avgenes)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T)
correlationAnalyzeR::getTERM2GENE()
correlationAnalyzeR::getTERM2GENE()
if (species = "Human") {
speciesScien <- "hsapiens"
} else {
speciesScien <- "mmusculus"
}
if (species = "Human") {
speciesScien <- "hsapiens"
} else {
speciesScien <- "mmusculus"
}
if (species == "Human") {
speciesScien <- "hsapiens"
} else {
speciesScien <- "mmusculus"
}
gseaType
TERM2GENE <- correlationAnalyzeR::getTERM2GENE(GSEA_Type = tolower(gseaType),
Species = speciesScien)
# Make GSEA objects
hsapiens_simple_TERM2GENE <- correlationAnalyzeR::getTERM2GENE(GSEA_Type = "simple",
Species = "hsapiens")
mmusculus_simple_TERM2GENE <- correlationAnalyzeR::getTERM2GENE(GSEA_Type = "simple",
Species = "mmusculus")
hsapiens_complex_TERM2GENE <- correlationAnalyzeR::getTERM2GENE(GSEA_Type = "complex",
Species = "hsapiens")
mmusculus_complex_TERM2GENE <- correlationAnalyzeR::getTERM2GENE(GSEA_Type = "complex",
Species = "mmusculus")
hsapiens_simple_TERM2GENE
mmusculus_simple_TERM2GENE
hsapiens_complex_TERM2GENE
mmusculus_complex_TERM2GENE
save(hsapiens_simple_TERM2GENE, mmusculus_simple_TERM2GENE,
hsapiens_complex_TERM2GENE, mmusculus_complex_TERM2GENE,
file = "data/TERM2GENE_Objects.RData")
load("data/TERM2GENE_Objects.RData")
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T)
correlationAnalyzeR::getAvailableGenes()
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T)
