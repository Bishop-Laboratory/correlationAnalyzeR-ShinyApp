# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
lapply( DBI::dbListConnections( DBI::dbDriver( drv = "MySQL")), DBI::dbDisconnect)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
lapply( DBI::dbListConnections( DBI::dbDriver( drv = "MySQL")), DBI::dbDisconnect)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("BRCA1"), crossCompareMode = TRUE, returnDataOnly = TRUE)
resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("BRCA1"), crossCompareMode = TRUE, returnDataOnly = TRUE, whichCompareGroups = "normal")
resList <- resList[[1]]
plt_dat <- resList[["heatmapBigDataVar"]][c(1:200),]
# plt_dat <- resList[["heatmapBigDataVar"]][c(1:200),]
# Center the scale
n <- length(colnames(plt_dat))# Get number of samples
width <- n*50
if (width < 800) {
width <- 800
} else if (width > 6000) {
width <- 6000
}
newNamesRaw <- colnames(plt_dat)
newNamesRaw <- strsplit(newNamesRaw, split = "_")
newNames <- sapply(newNamesRaw, "[[", 2)
newNames <- gsub(newNames, pattern = "0", replacement = " ")
newNames <- stringr::str_to_title(newNames)
mini <- min(plt_dat)
maxi <- max(plt_dat)
newVal <- max(c(abs(mini), maxi))
geneListNowVar <- rownames(plt_dat)
plt <- heatmaply(plt_dat, hide_colorbar = TRUE,
limits = c(-1*newVal, newVal),# plot_method = "plotly",
branches_lwd = .3,
colors =  colorRampPalette(rev(RColorBrewer::brewer.pal(n = 7, name =
"RdYlBu")))(100),
labCol = newNames,
showticklabels = c(T, F)) %>%
layout(height=500)
plt
plt_dat <- resList[["heatmapBigDataCo"]]
print(dim(plt_dat))
str(plt_dat)
print(rowMeans(plt_dat))
plt_datUp <- plt_dat[which(rowMeans(plt_dat) > 0),]
plt_datUp <- plt_datUp[order(matrixStats::rowVars(plt_datUp), decreasing = FALSE),]
matrixStats::rowVars(plt_datUp)
plt_datUp <- plt_datUp[order(matrixStats::rowVars(as.matrix(plt_datUp)), decreasing = FALSE),]
View(plt_datUp)
plt_datUp <- plt_datUp[c(1:100),]
geneNameCoUp <- rownames(plt_datUp)
print(geneNameCoUp)
plt_datDn <- plt_dat[which(rowMeans(plt_dat) < 0),]
plt_datDn <- plt_datDn[order(matrixStats::rowVars(as.matrix(plt_datDn)), decreasing = FALSE),]
plt_datDn <- plt_datDn[c(1:100),]
geneNameCoDn <- rownames(plt_datDn)
print(geneNameCoDn)
plt_dat <- unique(rbind(plt_datUp, plt_datDn))
print(dim(plt_dat))
str(plt_dat)
# Center the scale
n <- length(colnames(plt_dat))# Get number of samples
width <- n*50
if (width < 800) {
width <- 800
} else if (width > 6000) {
width <- 6000
}
newNamesRaw <- colnames(plt_dat)
newNamesRaw <- strsplit(newNamesRaw, split = "_")
newNames <- sapply(newNamesRaw, "[[", 2)
newNames <- gsub(newNames, pattern = "0", replacement = " ")
newNames <- stringr::str_to_title(newNames)
mini <- min(plt_dat)
maxi <- max(plt_dat)
newVal <- max(c(abs(mini), maxi))
plt <- heatmaply(plt_dat, hide_colorbar = TRUE,
limits = c(-1*newVal, newVal),# plot_method = "plotly",
branches_lwd = .3,
colors =  colorRampPalette(rev(RColorBrewer::brewer.pal(n = 7, name =
"RdYlBu")))(100),
labCol = newNames,
showticklabels = c(T, F)) %>%
layout(height=500)
plt
lapply( DBI::dbListConnections( DBI::dbDriver( drv = "MySQL")), DBI::dbDisconnect)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
lapply( DBI::dbListConnections( DBI::dbDriver( drv = "MySQL")), DBI::dbDisconnect)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
lapply( DBI::dbListConnections( DBI::dbDriver( drv = "MySQL")), DBI::dbDisconnect)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
lapply( DBI::dbListConnections( DBI::dbDriver( drv = "MySQL")), DBI::dbDisconnect)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
?showNotification
lapply( DBI::dbListConnections( DBI::dbDriver( drv = "MySQL")), DBI::dbDisconnect)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
lapply( DBI::dbListConnections( DBI::dbDriver( drv = "MySQL")), DBI::dbDisconnect)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
lapply( DBI::dbListConnections( DBI::dbDriver( drv = "MySQL")), DBI::dbDisconnect)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
