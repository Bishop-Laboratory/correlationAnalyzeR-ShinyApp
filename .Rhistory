#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
strong(span(paste0(" - ", "%"), style = "color: grey;"))
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
tags$script(HTML(paste0("var header = $('.navbar > .container-fluid');
header.append('<div style=\"float:right; vertical-align: middle;\">",
p("CPU free: ", strong(span(paste0(" - ", "%"), style = "color: grey;")), " | ", "Memory free: ",
strong(span(paste0(" - ", "%"), style = "color: grey;")), style = "padding: 15px; margin: 0px;"), "</div>');"
)))
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
?uiOutput
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
lapply( DBI::dbListConnections( DBI::dbDriver( drv = "MySQL")), DBI::dbDisconnect)
lapply( DBI::dbListConnections( DBI::dbDriver( drv = "MySQL")), DBI::dbDisconnect)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
a <- system("wmic path Win32_PerfFormattedData_PerfProc_Process get Name,PercentProcessorTime", intern = TRUE)
a
a <- system("wmic path Win32_PerfFormattedData_PerfProc_Process get PercentProcessorTime", intern = TRUE)
a
a <- system("wmic path Win32_PerfFormattedData_PerfProc_Process get Name,PercentProcessorTime", intern = TRUE)
a
a <- system("wmic path Win32_PerfFormattedData_PerfProc_Process get Name,PercentProcessorTime", intern = TRUE)
df <- do.call(rbind, lapply(strsplit(a, " "), function(x) {x <- x[x != ""];data.frame(process = x[1], cpu = x[2])}))
df[grepl("Rgui|rstudio", df$process),]
a <- system("wmic path Win32_PerfFormattedData_PerfProc_Process get Name,PercentProcessorTime", intern = TRUE)
df <- do.call(rbind, lapply(strsplit(a, " "), function(x) {x <- x[x != ""];data.frame(process = x[1], cpu = x[2])}))
df
df[grepl("Rgui|rstudio", df$process),]
a <- system("wmic path Win32_PerfFormattedData_PerfProc_Process get Name,PercentProcessorTime", intern = TRUE)
df <- do.call(rbind, lapply(strsplit(a, " "), function(x) {x <- x[x != ""];data.frame(process = x[1], cpu = x[2])}))
df[grepl("Rgui|rstudio", df$process),]
df[grepl("Rgui|rstudio", df$process),2]
as.numeric(df[grepl("Rgui|rstudio", df$process),2])
a <- system("wmic path Win32_PerfFormattedData_PerfProc_Process get Name,PercentProcessorTime", intern = TRUE)
df <- do.call(rbind, lapply(strsplit(a, " "), function(x) {x <- x[x != ""];data.frame(process = x[1], cpu = x[2])}))
df[grepl("Rgui|rstudio", df$process),2]
as.numeric(df[grepl("Rgui|rstudio", df$process),2])
num <- df[grepl("Rgui|rstudio", df$process),2]
num
as.numeric(num)
as.numeric(as.character(df[grepl("Rgui|rstudio", df$process),2]))
df$process
df$
4
df$cpu
as.numeric(as.character(df$cpu))
sum(as.numeric(as.character(df$cpu)))
sum(as.numeric(as.character(df$cpu)), na.rm = TRUE)
used <- as.numeric(as.character(df[grepl("Rgui|rstudio", df$process),2]))
total <- sum(as.numeric(as.character(df$cpu)), na.rm = TRUE)
a <- system("wmic path Win32_PerfFormattedData_PerfProc_Process get Name,PercentProcessorTime", intern = TRUE)
df <- do.call(rbind, lapply(strsplit(a, " "), function(x) {x <- x[x != ""];data.frame(process = x[1], cpu = x[2])}))
used <- as.numeric(as.character(df[grepl("Rgui|rstudio", df$process),2]))
total <- sum(as.numeric(as.character(df$cpu)), na.rm = TRUE)
used <- sum(as.numeric(as.character(df[grepl("Rgui|rstudio", df$process),2])), na.rm = TRUE)
a <- system("wmic path Win32_PerfFormattedData_PerfProc_Process get Name,PercentProcessorTime", intern = TRUE)
df <- do.call(rbind, lapply(strsplit(a, " "), function(x) {x <- x[x != ""];data.frame(process = x[1], cpu = x[2])}))
used <- sum(as.numeric(as.character(df[grepl("Rgui|rstudio", df$process),2])), na.rm = TRUE)
total <- sum(as.numeric(as.character(df$cpu)), na.rm = TRUE)
a <- system("wmic path Win32_PerfFormattedData_PerfProc_Process get Name,PercentProcessorTime", intern = TRUE)
df <- do.call(rbind, lapply(strsplit(a, " "), function(x) {x <- x[x != ""];data.frame(process = x[1], cpu = x[2])}))
used <- sum(as.numeric(as.character(df[grepl("Rgui|rstudio", df$process),2])), na.rm = TRUE)
a <- system("wmic path Win32_PerfFormattedData_PerfProc_Process get Name,PercentProcessorTime", intern = TRUE)
df <- do.call(rbind, lapply(strsplit(a, " "), function(x) {x <- x[x != ""];data.frame(process = x[1], cpu = x[2])}))
used <- sum(as.numeric(as.character(df[grepl("Rgui|rstudio", df$process),2])), na.rm = TRUE)
a <- system("wmic path Win32_PerfFormattedData_PerfProc_Process get Name,PercentProcessorTime", intern = TRUE)
df <- do.call(rbind, lapply(strsplit(a, " "), function(x) {x <- x[x != ""];data.frame(process = x[1], cpu = x[2])}))
used <- sum(as.numeric(as.character(df[grepl("Rgui|rstudio", df$process),2])), na.rm = TRUE)
a <- system("wmic path Win32_PerfFormattedData_PerfProc_Process get Name,PercentProcessorTime", intern = TRUE)
df <- do.call(rbind, lapply(strsplit(a, " "), function(x) {x <- x[x != ""];data.frame(process = x[1], cpu = x[2])}))
used <- sum(as.numeric(as.character(df[grepl("Rgui|rstudio", df$process),2])), na.rm = TRUE)
a <- system("wmic path Win32_PerfFormattedData_PerfProc_Process get Name,PercentProcessorTime", intern = TRUE)
df <- do.call(rbind, lapply(strsplit(a, " "), function(x) {x <- x[x != ""];data.frame(process = x[1], cpu = x[2])}))
used <- sum(as.numeric(as.character(df[grepl("Rgui|rstudio", df$process),2])), na.rm = TRUE)
sum(as.numeric(as.character(df$cpu)), na.rm = TRUE)/parallel::detectCores()
cpuNow <- 100-cpuNow
cpuNow <- round(100-cpuNow)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
availableWorkers()
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
