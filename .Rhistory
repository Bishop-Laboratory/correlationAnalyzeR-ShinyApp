# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
lapply( DBI::dbListConnections( DBI::dbDriver( drv = "MySQL")), DBI::dbDisconnect)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
res <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("NONO"), returnDataOnly = T, crossCompareMode = T)
View(res)
resList <- res
data <- resList[[1]][["correlations"]]
data$Variance <- matrixStats::rowVars(as.matrix(data))
data <- cbind(rownames(data), data)
colnames(data)[1] <- "geneName"
data <- data[which(data[,1] != cleanRes$primaryGene),]
rownames(data) <- NULL
data <- merge(x = cleanRes$basicGeneInfo, y = data, by = "geneName")
data <- data[order(data$Variance, decreasing = T),]
data
resList[[1]][["correlations"]] <- data
resList <- resList[[1]]
resList[["correlations"]]
# Assign Group-mode-only values
uiNameRaw <- paste0(dataList[["primaryGene"]]," ",
tolower(dataList[["whichCompareGroups"]]),
" groups")
fileNameRaw <- paste0(dataList[["primaryGene"]], "_",
tolower(dataList[["whichCompareGroups"]]), "_",
"groupMode")
heatMapDat(resList[["heatmapBigData"]])
# heatMap(resList[["heatmapBig"]])
heatMapSmall(resList[["heatmapSmall"]])
tpmBP <- resList[["TPM_boxPlot"]]
tpmBP <- tpmBP + ggpubr::rotate_x_text(45, vjust = 1)
geneTPMBoxplot(tpmBP)
geneTPMBoxplotData(resList[["TPM_DF"]])
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
resList$correlations
runApp(launch.browser = T, display.mode = "normal")
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
uiName = "(all - normal)"
replacement = "")
gsub(uiName,
pattern = "\\(|\\)",
replacement = "")
gsub(uiName,
pattern = "(|)",
replacement = "")
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
gc()
gc()
gc(full = T)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
lapply( DBI::dbListConnections( DBI::dbDriver( drv = "MySQL")), DBI::dbDisconnect)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
dev.off()
options(spinner.color="#337AB7")
# Make sure tmp dir exists
if (! dir.exists("www/tmp")) {
dir.create("www/tmp")
}
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
TERM2GENE <- correlationAnalyzeR::getTERM2GENE(GSEA_Type = "complex",
Species = cleanRes$selectedSpecies )
TERM2GENE <- correlationAnalyzeR::getTERM2GENE(GSEA_Type = "complex",
Species = "hsapiens")
View(TERM2GENE)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
packageurl <- "https://cran.r-project.org/src/contrib/Archive/msigdbr/msigdbr_6.2.1.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
msigdbr::msigdbR()
install.packages(packageurl, repos=NULL, type="source")
mdf <- msigdbr::msigdbr()
View(mdf)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
