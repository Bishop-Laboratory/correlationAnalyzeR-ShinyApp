#
# })
?heatmaply
?heatmaply
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
?plotOutput
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
# # Bug testing
primaryGene <- "BRCA1"
# Validate primary gene
if (! is.null(primaryGene)){
# Handle bad gene name here
res <- symbolConverter(symbolVec = primaryGene,
species = selectedSpecies, pool = pool)
unresolvableGenes <- res$unresolvableGenes
if (length(res$resGenes)) {
primaryGene <- res$resGenes[1]
multiMappedGenes <- res$multiMappedGenes
if (length(multiMappedGenes)) {
inputAlias <- names(multiMappedGenes)[1]
mappedSymbols <- multiMappedGenes[[1]]
msg <- paste0("Input '", inputAlias,
"' returned multiple official gene symbols: '",
paste0(mappedSymbols, collapse = "', '"),
"'. Only the first will be used, '", primaryGene, "'.")
showNotification(id = "multi-mapped-gene-warning", ui = msg, session = session,
closeButton = T, type = "warning", duration = 8)
}
resList[["primaryGene"]] <- primaryGene
}
}
# # Bug testing
primaryGene <- "BRCA1"
selectedSpecies = "Human"
pool
# Load connections
pool <- pool::dbPool(
drv = RMySQL::MySQL(),
user = "public-rds-user", port = 3306,
dbname="bishoplabdb",
password='public-user-password',
host="bishoplabdb.cyss3bq5juml.us-west-2.rds.amazonaws.com"
)
print("Pool connected")
# Handle bad gene name here
res <- symbolConverter(symbolVec = primaryGene,
species = selectedSpecies, pool = pool)
pool
selectedSpecies
primaryGene
dbCon <- org.Mm.eg.db::org.Mm.eg_dbconn()
# Convert to correlationAnalyzeR inputs
if (selectedSpecies == "Human") {
selectedSpecies <- "hsapiens"
basicGeneInfo <- HS_basicGeneInfo
} else {
selectedSpecies <- "mmusculus"
basicGeneInfo <- MM_basicGeneInfo
}
# Get GlobalData inputs
HS_basicGeneInfo <- GlobalData$HS_basicGeneInfo
MM_basicGeneInfo <- GlobalData$MM_basicGeneInfo
# Convert to correlationAnalyzeR inputs
if (selectedSpecies == "Human") {
selectedSpecies <- "hsapiens"
basicGeneInfo <- HS_basicGeneInfo
} else {
selectedSpecies <- "mmusculus"
basicGeneInfo <- MM_basicGeneInfo
}
if (sampleType == "normal") {
sampleType <- "normal"
} else {
sampleType <- "cancer"
}
resList <- list()
resList[["selectedSpecies"]] <- selectedSpecies
resList[["sampleType"]] <- sampleType
resList[["tissueType"]] <- tissueType
resList[["basicGeneInfo"]] <- basicGeneInfo
# # Bug testing
primaryGene <- "BRCA1"
# Validate primary gene
if (! is.null(primaryGene)){
# Handle bad gene name here
res <- symbolConverter(symbolVec = primaryGene,
species = selectedSpecies, pool = pool)
unresolvableGenes <- res$unresolvableGenes
if (length(res$resGenes)) {
primaryGene <- res$resGenes[1]
multiMappedGenes <- res$multiMappedGenes
if (length(multiMappedGenes)) {
inputAlias <- names(multiMappedGenes)[1]
mappedSymbols <- multiMappedGenes[[1]]
msg <- paste0("Input '", inputAlias,
"' returned multiple official gene symbols: '",
paste0(mappedSymbols, collapse = "', '"),
"'. Only the first will be used, '", primaryGene, "'.")
showNotification(id = "multi-mapped-gene-warning", ui = msg, session = session,
closeButton = T, type = "warning", duration = 8)
}
resList[["primaryGene"]] <- primaryGene
}
}
View(resList)
res
sqlQuery <- 'SELECT * FROM alias, gene_info WHERE alias._id == gene_info._id;'
aliasSymbol <- DBI::dbGetQuery(dbCon, sqlQuery)
aliasSymbol <- as.data.frame(aliasSymbol)
avgenes <- correlationAnalyzeR::getAvailableGenes(Species = species, pool = pool)
species <- 'hsapiens'
avgenes <- correlationAnalyzeR::getAvailableGenes(Species = species, pool = pool)
pool
avgenes <- correlationAnalyzeR::getAvailableGenes(Species = species, pool = pool)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
getAvailableGenes()
pool
res <- analyzeGenePairs(genesOfInterest = c("BRCA1", "TP53"), returnDataOnly = T, pool = pool)
getAvailableGenes()
getAvailableGenes(pool = pool)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
lapply( DBI::dbListConnections( DBI::dbDriver( drv = "MySQL")), DBI::dbDisconnect)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
res <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("NONO"), returnDataOnly = T, crossCompareMode = T)
View(res)
resList <- res
data <- resList[[1]][["correlations"]]
data$Variance <- matrixStats::rowVars(as.matrix(data))
data <- cbind(rownames(data), data)
colnames(data)[1] <- "geneName"
data <- data[which(data[,1] != cleanRes$primaryGene),]
rownames(data) <- NULL
data <- merge(x = cleanRes$basicGeneInfo, y = data, by = "geneName")
data <- data[order(data$Variance, decreasing = T),]
data
resList[[1]][["correlations"]] <- data
resList <- resList[[1]]
resList[["correlations"]]
# Assign Group-mode-only values
uiNameRaw <- paste0(dataList[["primaryGene"]]," ",
tolower(dataList[["whichCompareGroups"]]),
" groups")
fileNameRaw <- paste0(dataList[["primaryGene"]], "_",
tolower(dataList[["whichCompareGroups"]]), "_",
"groupMode")
heatMapDat(resList[["heatmapBigData"]])
# heatMap(resList[["heatmapBig"]])
heatMapSmall(resList[["heatmapSmall"]])
tpmBP <- resList[["TPM_boxPlot"]]
tpmBP <- tpmBP + ggpubr::rotate_x_text(45, vjust = 1)
geneTPMBoxplot(tpmBP)
geneTPMBoxplotData(resList[["TPM_DF"]])
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
resList$correlations
runApp(launch.browser = T, display.mode = "normal")
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
uiName = "(all - normal)"
replacement = "")
gsub(uiName,
pattern = "\\(|\\)",
replacement = "")
gsub(uiName,
pattern = "(|)",
replacement = "")
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
gc()
gc()
gc(full = T)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
