GlobalData = GlobalData,
pool = pool, auth = auth)
geneVsGeneModeData[["geneVsGeneModeData"]] <- callModule(module = geneVsGeneModeAnalysis,
id = "geneVsGeneModeAnalysis",
parent_session = parent_session,
GlobalData = GlobalData,
pool = pool, auth = auth)
geneVsGeneListModeData[["geneVsGeneListModeData"]] <- callModule(module = geneVsGeneListModeAnalysis,
id = "geneVsGeneListModeAnalysis",
parent_session = parent_session,
GlobalData = GlobalData,
pool = pool, auth = auth)
topologyModeData[["topologyModeData"]] <- callModule(module = topologyModeAnalysis,
id = "topologyModeAnalysis",
parent_session = parent_session,
GlobalData = GlobalData,
pool = pool, auth = auth)
callModule(module = singleModePlots,
id = "singleModePlots",
dataTables = singleModeData,
parent_session = session, auth = auth)
callModule(module = geneVsGeneModePlots,
id = "geneVsGeneModePlots",
dataTables = geneVsGeneModeData,
parent_session = session,
GlobalData = GlobalData, auth = auth)
callModule(module = geneVsGeneListModePlots,
id = "geneVsGeneListModePlots",
dataTables = geneVsGeneListModeData,
parent_session = session,
GlobalData = GlobalData, auth = auth)
callModule(module = topologyModePlots,
id = "topologyModePlots",
dataTables = topologyModeData,
parent_session = session,
GlobalData = GlobalData, auth = auth)
}
shinyApp(ui, server)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
?selectInput
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
correlationAnalyzeR::MSIGDB_Geneset_Names
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
# # Bug testing
primaryGene <- "BRCA1"
selectedSpecies <- "Human"
sampleType <- "normal"
tissueType <- "all"
load("data/GlobalData.RData")
# Load connections
pool <- pool::dbPool(
drv = RMySQL::MySQL(max.con = 150),
user = "public-rds-user", port = 3306,
dbname="bishoplabdb",
password='public-user-password', maxSize = Inf,
host="bishoplabdb.cyss3bq5juml.us-west-2.rds.amazonaws.com"
)
secondaryGenes <- c("AAACCAC_MIR140")
MM_basicGeneInfo <- GlobalData$MM_basicGeneInfo
HS_basicGeneInfo <- GlobalData$HS_basicGeneInfo
# Convert to correlationAnalyzeR inputs
if (selectedSpecies == "Human") {
selectedSpecies <- "hsapiens"
basicGeneInfo <- HS_basicGeneInfo
} else {
selectedSpecies <- "mmusculus"
basicGeneInfo <- MM_basicGeneInfo
}
if (sampleType == "normal") {
sampleType <- "normal"
} else {
sampleType <- "cancer"
}
resList <- list()
resList[["selectedSpecies"]] <- selectedSpecies
resList[["sampleType"]] <- sampleType
resList[["tissueType"]] <- tissueType
resList[["basicGeneInfo"]] <- basicGeneInfo
# Validate primary gene
if (! is.null(primaryGene)){
# Handle bad gene name here
res <- symbolConverter(symbolVec = primaryGene,
species = selectedSpecies, pool = pool)
unresolvableGenes <- res$unresolvableGenes
if (length(res$resGenes)) {
multiMappedGenes <- res$multiMappedGenes
if (length(multiMappedGenes)) {
inputAlias <- primaryGene
mappedSymbols <- multiMappedGenes
msg <- paste0("Input '", inputAlias,
"' returned multiple official gene symbols: '",
paste0(mappedSymbols, collapse = "', '"),
"'. Only the first will be used, '", res$resGenes[1], "'.")
showNotification(id = "multi-mapped-gene-warning", ui = msg, session = session,
closeButton = T, type = "warning", duration = 10)
}
primaryGeneNow <- res$resGenes[1]
resList[["primaryGene"]] <- primaryGeneNow
}
}
possibleGenesets <- correlationAnalyzeR::MSIGDB_Geneset_Names
# Evaluate user input for secondary genes
genesetInputs <- toupper(secondaryGenes)[which(toupper(secondaryGenes) %in% possibleGenesets)]
shiny::validate(
need((! length(genesetInputs) > 1), message = "Please select only one MSIGDB geneset.")
)
if (length(genesetInputs) == 1) {
resList[['geneSetInputType']] <- T
secondaryGenes <- genesetInputs
} else {
resList[['geneSetInputType']] <- F
res <- symbolConverter(symbolVec = secondaryGenes, pool = pool,
species = selectedSpecies)
secondaryGenes <- NULL
unresolvableGenes <- res$unresolvableGenes
if (length(unresolvableGenes)) {
msg <- paste0("Input list warning: '", paste0(unique(unresolvableGenes), collapse = "', '"),
"' not found. Skipping...")
showNotification(id = "unresolvable-gene-warning", ui = msg, session = session,
closeButton = T, type = "warning", duration = 8)
}
if (length(res$resGenes)) {
secondaryGenes <- res$resGenes
resList[["secondaryGenes"]] <- secondaryGenes
multiMappedGenes <- res$multiMappedGenes
if (length(multiMappedGenes)) {
msg <- paste0("Input '", paste0(multiMappedGenes, collapse = ", "),
"' returned multiple official gene symbols.")
showNotification(id = "multi-mapped-gene-warning", ui = msg, session = session,
closeButton = T, type = "warning", duration = 8)
}
}
}
resList[["genesetInputs"]] <- genesetInputs
genesetInputs
secondaryGenes
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
load("data/GlobalData.RData")
GlobalData$MDF
table(GlobalData$MDF$gs_name)
term2geneCount <- as.data.frame(table(GlobalData$MDF$gs_name))
View(term2geneCount)
GlobalData$MSIGDB_Geneset_Small_Names <- term2geneCount$Var1[which(term2geneCount$Freq < 501)]
GlobalData$MSIGDB_Geneset_Small_Names
term2geneCount <- as.data.frame(table(GlobalData$MDF$gs_name), stringsAsFactors = FALSE)
GlobalData$MSIGDB_Geneset_Small_Names <- term2geneCount$Var1[which(term2geneCount$Freq < 501)]
GlobalData$MSIGDB_Geneset_Small_Names
save(GlobalData, file = "data/GlobalData.RData")
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
