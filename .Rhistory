#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
?future
?future::future
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
plan(multiprocess, gc = TRUE)
# Bug test
genesOfInterest = c("BRCA1", "TP53")
Sample_Type = c("normal", "normal")
Tissue = c("all", "all")
cleanResOne <- list(selectedSpecies = "hsapiens")
gseaType = "simple"
TERM2GENE = correlationAnalyzeR::getTERM2GENE()
pool = NULL
res <- future({
correlationAnalyzeR::analyzeGenePairs(genesOfInterest = genesOfInterest,
Sample_Type = Sample_Type,
Tissue = Tissue,
Species = cleanResOne$selectedSpecies,
GSEA_Type = gseaType,
returnDataOnly = T,
TERM2GENE = TERM2GENE,
topPlots = F, pool = pool,
# nperm = 500, sampler = T,
runGSEA = T)
}, globals = list(Tissue = Tissue, genesOfInterest = genesOfInterest,
Sample_Type = Sample_Type,
gseaType = gseaType,
cleanResOne = cleanResOne,
pool = NULL,
TERM2GENE = TERM2GENE)) %...>%
(function(pairedRes) {
print("Out of the main future!")
dataOrig <- pairedRes$compared$correlations
data <- cbind(rownames(dataOrig), dataOrig)
colnames(data)[1] <- "geneName"
# data <- data[which(data[,1] != cleanRes$primaryGene),]
rownames(data) <- NULL
data <- merge(x = cleanResOne$basicGeneInfo, y = data, by = "geneName")
colnames(data)[c(4:7)] <- colnames(dataOrig)
pairedRes[["processedCorrelationsFrame"]] <- data
res <- list("geneVsGeneResults" = pairedRes,
"species" = species,
"gseaType" = gseaType,
"pval" = pval,
"geneOne" = cleanResOne$primaryGene,
"sampleTypeOne" = sampleTypeOne,
"tissueTypeOne" = tissueTypeOne,
"geneTwo" = cleanResTwo$primaryGene,
"sampleTypeTwo" = sampleTypeTwo,
"tissueTypeTwo" = tissueTypeTwo,
"progress" = progress)
print("Returning data from future!")
res
})
res
res %...>% str*
res %...>% str()
res
res <- future({
correlationAnalyzeR::analyzeGenePairs(genesOfInterest = genesOfInterest,
Sample_Type = Sample_Type,
Tissue = Tissue,
Species = cleanResOne$selectedSpecies,
GSEA_Type = gseaType,
returnDataOnly = T,
TERM2GENE = TERM2GENE,
topPlots = F, pool = pool,
# nperm = 500, sampler = T,
runGSEA = T)
}, globals = list(Tissue = Tissue, genesOfInterest = genesOfInterest,
Sample_Type = Sample_Type,
gseaType = gseaType,
cleanResOne = cleanResOne,
pool = NULL,
TERM2GENE = TERM2GENE)) %...>%
(function(pairedRes) {
print("Out of the main future!")
dataOrig <- pairedRes$compared$correlations
data <- cbind(rownames(dataOrig), dataOrig)
colnames(data)[1] <- "geneName"
# data <- data[which(data[,1] != cleanRes$primaryGene),]
rownames(data) <- NULL
data <- merge(x = cleanResOne$basicGeneInfo, y = data, by = "geneName")
colnames(data)[c(4:7)] <- colnames(dataOrig)
pairedRes[["processedCorrelationsFrame"]] <- data
res <- list("geneVsGeneResults" = pairedRes,
"species" = species,
"gseaType" = gseaType,
"pval" = pval,
"geneOne" = cleanResOne$primaryGene,
"sampleTypeOne" = sampleTypeOne,
"tissueTypeOne" = tissueTypeOne,
"geneTwo" = cleanResTwo$primaryGene,
"sampleTypeTwo" = sampleTypeTwo,
"tissueTypeTwo" = tissueTypeTwo,
"progress" = progress)
print("Returning data from future!")
res
})
res %...>% str()
res %...>% names(res)
correlationAnalyzeR::analyzeGenePairs(genesOfInterest = genesOfInterest,
Sample_Type = Sample_Type,
Tissue = Tissue,
Species = cleanResOne$selectedSpecies,
GSEA_Type = gseaType,
returnDataOnly = T,
TERM2GENE = TERM2GENE,
topPlots = F, pool = pool,
# nperm = 500, sampler = T,
runGSEA = T)
print("Out of the main future!")
pairedRes <- correlationAnalyzeR::analyzeGenePairs(genesOfInterest = genesOfInterest,
Sample_Type = Sample_Type,
Tissue = Tissue,
Species = cleanResOne$selectedSpecies,
GSEA_Type = gseaType,
returnDataOnly = T,
TERM2GENE = TERM2GENE,
topPlots = F, pool = pool,
# nperm = 500, sampler = T,
runGSEA = T)
print("Out of the main future!")
dataOrig <- pairedRes$compared$correlations
data <- cbind(rownames(dataOrig), dataOrig)
colnames(data)[1] <- "geneName"
# data <- data[which(data[,1] != cleanRes$primaryGene),]
rownames(data) <- NULL
data <- merge(x = cleanResOne$basicGeneInfo, y = data, by = "geneName")
load("data/GlobalData.RData")
cleanResOne <- list(selectedSpecies = "hsapiens",
basicGeneInfo = GlobalData$HS_basicGeneInfo)
data <- merge(x = cleanResOne$basicGeneInfo, y = data, by = "geneName")
colnames(data)[c(4:7)] <- colnames(dataOrig)
pairedRes[["processedCorrelationsFrame"]] <- data
res <- list("geneVsGeneResults" = pairedRes,
"species" = species,
"gseaType" = gseaType,
"pval" = pval,
"geneOne" = cleanResOne$primaryGene,
"sampleTypeOne" = sampleTypeOne,
"tissueTypeOne" = tissueTypeOne,
"geneTwo" = cleanResTwo$primaryGene,
"sampleTypeTwo" = sampleTypeTwo,
"tissueTypeTwo" = tissueTypeTwo,
"progress" = progress)
# Bug test
genesOfInterest = c("BRCA1", "TP53")
Sample_Type = c("normal", "normal")
Tissue = c("all", "all")
cleanResOne <- list(selectedSpecies = "hsapiens",
primaryGene = "BRCA1",
basicGeneInfo = GlobalData$HS_basicGeneInfo)
cleanResTwo <- list(primaryGene = "TP53")
gseaType = "simple"
TERM2GENE = correlationAnalyzeR::getTERM2GENE()
# Bug test
genesOfInterest = c("BRCA1", "TP53")
Sample_Type = c("normal", "normal")
Tissue = c("all", "all")
cleanResOne <- list(selectedSpecies = "hsapiens",
primaryGene = "BRCA1",
basicGeneInfo = GlobalData$HS_basicGeneInfo)
cleanResTwo <- list(primaryGene = "TP53")
gseaType = "simple"
TERM2GENE = correlationAnalyzeR::getTERM2GENE()
pool = NULL
species = "Human"
pval = .05
sampleTypeOne = "normal"
sampleTypeTwo = "normal"
tissueTypeOne = "all"
tissueTypeTwo = "all"
progress = NULL
res <- future({
correlationAnalyzeR::analyzeGenePairs(genesOfInterest = genesOfInterest,
Sample_Type = Sample_Type,
Tissue = Tissue,
Species = cleanResOne$selectedSpecies,
GSEA_Type = gseaType,
returnDataOnly = T,
TERM2GENE = TERM2GENE,
topPlots = F, pool = pool,
# nperm = 500, sampler = T,
runGSEA = T)
}, globals = list(Tissue = Tissue, genesOfInterest = genesOfInterest,
Sample_Type = Sample_Type,
gseaType = gseaType,
cleanResOne = cleanResOne,
pool = NULL,
TERM2GENE = TERM2GENE)) %...>%
(function(pairedRes) {
print("Out of the main future!")
dataOrig <- pairedRes$compared$correlations
data <- cbind(rownames(dataOrig), dataOrig)
colnames(data)[1] <- "geneName"
# data <- data[which(data[,1] != cleanRes$primaryGene),]
rownames(data) <- NULL
data <- merge(x = cleanResOne$basicGeneInfo, y = data, by = "geneName")
colnames(data)[c(4:7)] <- colnames(dataOrig)
pairedRes[["processedCorrelationsFrame"]] <- data
res <- list("geneVsGeneResults" = pairedRes,
"species" = species,
"gseaType" = gseaType,
"pval" = pval,
"geneOne" = cleanResOne$primaryGene,
"sampleTypeOne" = sampleTypeOne,
"tissueTypeOne" = tissueTypeOne,
"geneTwo" = cleanResTwo$primaryGene,
"sampleTypeTwo" = sampleTypeTwo,
"tissueTypeTwo" = tissueTypeTwo,
"progress" = progress)
print("Returning data from future!")
res
})
res
res %...>% print(
)
res %...>% norRes
res
res$finally()
promise_all(res)
promise_resolve(res)
res$then()
res$then(res)
res <- future({
correlationAnalyzeR::analyzeGenePairs(genesOfInterest = genesOfInterest,
Sample_Type = Sample_Type,
Tissue = Tissue,
Species = cleanResOne$selectedSpecies,
GSEA_Type = gseaType,
returnDataOnly = T,
TERM2GENE = TERM2GENE,
topPlots = F, pool = pool,
# nperm = 500, sampler = T,
runGSEA = T)
}, globals = list(Tissue = Tissue, genesOfInterest = genesOfInterest,
Sample_Type = Sample_Type,
gseaType = gseaType,
cleanResOne = cleanResOne,
pool = NULL,
TERM2GENE = TERM2GENE)) %...>%
(function(pairedRes) {
print(names(pairedRes))
# print("Out of the main future!")
# dataOrig <- pairedRes$compared$correlations
# data <- cbind(rownames(dataOrig), dataOrig)
# colnames(data)[1] <- "geneName"
# # data <- data[which(data[,1] != cleanRes$primaryGene),]
# rownames(data) <- NULL
# data <- merge(x = cleanResOne$basicGeneInfo, y = data, by = "geneName")
# colnames(data)[c(4:7)] <- colnames(dataOrig)
# pairedRes[["processedCorrelationsFrame"]] <- data
# res <- list("geneVsGeneResults" = pairedRes,
#             "species" = species,
#             "gseaType" = gseaType,
#             "pval" = pval,
#             "geneOne" = cleanResOne$primaryGene,
#             "sampleTypeOne" = sampleTypeOne,
#             "tissueTypeOne" = tissueTypeOne,
#             "geneTwo" = cleanResTwo$primaryGene,
#             "sampleTypeTwo" = sampleTypeTwo,
#             "tissueTypeTwo" = tissueTypeTwo,
#             "progress" = progress)
# print("Returning data from future!")
# res
return(pairedRes)
})
res
res
res <- value(res)
res <- future({
correlationAnalyzeR::analyzeGenePairs(genesOfInterest = genesOfInterest,
Sample_Type = Sample_Type,
Tissue = Tissue,
Species = cleanResOne$selectedSpecies,
GSEA_Type = gseaType,
returnDataOnly = T,
TERM2GENE = TERM2GENE,
topPlots = F, pool = pool,
# nperm = 500, sampler = T,
runGSEA = T)
}, globals = list(Tissue = Tissue, genesOfInterest = genesOfInterest,
Sample_Type = Sample_Type,
gseaType = gseaType,
cleanResOne = cleanResOne,
pool = NULL,
TERM2GENE = TERM2GENE)) %...>%
(function(pairedRes) {
print(names(pairedRes))
# print("Out of the main future!")
# dataOrig <- pairedRes$compared$correlations
# data <- cbind(rownames(dataOrig), dataOrig)
# colnames(data)[1] <- "geneName"
# # data <- data[which(data[,1] != cleanRes$primaryGene),]
# rownames(data) <- NULL
# data <- merge(x = cleanResOne$basicGeneInfo, y = data, by = "geneName")
# colnames(data)[c(4:7)] <- colnames(dataOrig)
# pairedRes[["processedCorrelationsFrame"]] <- data
# res <- list("geneVsGeneResults" = pairedRes,
#             "species" = species,
#             "gseaType" = gseaType,
#             "pval" = pval,
#             "geneOne" = cleanResOne$primaryGene,
#             "sampleTypeOne" = sampleTypeOne,
#             "tissueTypeOne" = tissueTypeOne,
#             "geneTwo" = cleanResTwo$primaryGene,
#             "sampleTypeTwo" = sampleTypeTwo,
#             "tissueTypeTwo" = tissueTypeTwo,
#             "progress" = progress)
# print("Returning data from future!")
# res
return(pairedRes)
})
res <- value(res)
res <- value(res)
res <- value(res)
res <- value(res)
res <- future({
correlationAnalyzeR::analyzeGenePairs(genesOfInterest = genesOfInterest,
Sample_Type = Sample_Type,
Tissue = Tissue,
Species = cleanResOne$selectedSpecies,
GSEA_Type = gseaType,
returnDataOnly = T,
TERM2GENE = TERM2GENE,
topPlots = F, pool = pool,
# nperm = 500, sampler = T,
runGSEA = T)
}, globals = list(Tissue = Tissue, genesOfInterest = genesOfInterest,
Sample_Type = Sample_Type,
gseaType = gseaType,
cleanResOne = cleanResOne,
pool = NULL,
TERM2GENE = TERM2GENE))
res <- value(res)
correlationAnalyzeR::fixStrings("GSE369_PRE_VS_POST_IL6_INJECTION_SOCS3_KO_LIVER_DN")
cpuNow <- gsub(cpuNow[c(-1)], pattern = " ", replacement = "")
future({})
res <- future({print("Hey")})
res
class(res)
res <- future({
correlationAnalyzeR::analyzeGenePairs(genesOfInterest = genesOfInterest,
Sample_Type = Sample_Type,
Tissue = Tissue,
Species = cleanResOne$selectedSpecies,
GSEA_Type = gseaType,
returnDataOnly = T,
TERM2GENE = TERM2GENE,
topPlots = F, pool = pool,
# nperm = 500, sampler = T,
runGSEA = T)
}, globals = list(Tissue = Tissue, genesOfInterest = genesOfInterest,
Sample_Type = Sample_Type,
gseaType = gseaType,
cleanResOne = cleanResOne,
pool = NULL,
TERM2GENE = TERM2GENE)) %...>%
(function(pairedRes) {
print("Out of the main future!")
dataOrig <- pairedRes$compared$correlations
data <- cbind(rownames(dataOrig), dataOrig)
colnames(data)[1] <- "geneName"
# data <- data[which(data[,1] != cleanRes$primaryGene),]
rownames(data) <- NULL
data <- merge(x = cleanResOne$basicGeneInfo, y = data, by = "geneName")
colnames(data)[c(4:7)] <- colnames(dataOrig)
pairedRes[["processedCorrelationsFrame"]] <- data
res <- list("geneVsGeneResults" = pairedRes,
"species" = species,
"gseaType" = gseaType,
"pval" = pval,
"geneOne" = cleanResOne$primaryGene,
"sampleTypeOne" = sampleTypeOne,
"tissueTypeOne" = tissueTypeOne,
"geneTwo" = cleanResTwo$primaryGene,
"sampleTypeTwo" = sampleTypeTwo,
"tissueTypeTwo" = tissueTypeTwo,
"progress" = progress)
print("Returning data from future!")
res
})
res
class(res)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
runApp(launch.browser = TRUE)
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
