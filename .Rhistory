library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
shinyWidgets::switchInput()
library(shinyWidgets)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
?popify
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
colnames(correlations)[1] <- "geneName"
View(humanGenes)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
newNames <- colnames(plt_dat)
newNames <- colnames(plt_dat)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
colorRampPalette(rev(brewer.pal(n = 7, name =
"RdYlBu")))(100)
colorRampPalette
colorRampPalette(rev(RColorBrewer::brewer.pal(n = 7, name =
"RdYlBu")))(100)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
# # Bug testing
genesOfInterest <- c("ATM", "SLC3A2")
pairedRes <- correlationAnalyzeR::analyzeGenePairs(genesOfInterest = genesOfInterest,
Species = "hsapiens",
returnDataOnly = T,
crossCompareMode = T)
pairedRes$normalVsCancerPairs$`Adipose - Normal`$scatterPlot
dataOrig <- pairedRes$Correlations
data <- cbind(rownames(dataOrig), dataOrig)
colnames(data)[1] <- "geneName"
# data <- data[which(data[,1] != cleanRes$primaryGene),]
rownames(data) <- NULL
data <- merge(x = cleanResOne$basicGeneInfo, y = data, by = "geneName")
pairedRes[["Correlations"]] <- data
dataList <- pairedRes[["normalVsCancerPairs"]]
mode <- pairedRes[["mode"]]
correlations <- pairedRes[["Correlations"]]
if (mode == "cross_geneVsGene") {
print("Gene vs gene")
uiName <- paste0(geneOne, " vs ", geneTwo)
} else {
print("Normal vs cancer")
uiName <- paste0(geneOne, " - normal vs. cancer")
}
geneOne <- "ATM"
geneTwo <- "SLC3A2"
if (mode == "cross_geneVsGene") {
print("Gene vs gene")
uiName <- paste0(geneOne, " vs ", geneTwo)
} else {
print("Normal vs cancer")
uiName <- paste0(geneOne, " - normal vs. cancer")
}
downloadDataPairsCor <- list(
"content" = correlations,
"uiName" = paste0(uiName, " correlation data"),
"file" = ".tsv"
)
plotListHeat <- list()
plotListScatter <- list()
for (i in 1:length(dataList)) {
name <- names(dataList)[i]
print(name)
plotListScatter[[i]] <- dataList[[i]][["scatterPlot"]]
plotListHeat[[i]] <- dataList[[i]][["heatMap"]][[4]]
}
ga <- ggpubr::ggarrange(plotlist = plotListScatter, ncol = 3)
ga <- ggpubr::ggarrange(plotlist = plotListScatter, ncol = 4)
ge <- gridExtra::arrangeGrob(grobs = plotListHeat, ncol = 7)
tmp <- paste0("www/", sample(c(1:100000000000), 1))
dir.create(tmp)
tmpHeatFile <- file.path(tmp, paste0(uiName, " heatMap.pdf"))
ggsave(ge, filename = tmpHeatFile, height = 30, width = 40)
ge <- gridExtra::arrangeGrob(grobs = plotListHeat, ncol = 7)
tmp <- paste0("www/", sample(c(1:100000000000), 1))
tmp <- paste0("www/", sample(c(1:100000000), 1))
dir.create(tmp)
tmpHeatFile <- file.path(tmp, paste0(uiName, " heatMap.pdf"))
ggplot2::ggsave(ge, filename = tmpHeatFile, height = 30, width = 40)
tmpscatterFile <- file.path(tmp, paste0(uiName, " scatterMap.pdf"))
ggpubr::ggexport(plotlist = plotListScatter, ncol = 4,
filename = "file2.pdf", height = 5, width = 20)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
tmpHeatFile
tags$iframe()
print(tmpscatterFile)
tmpscatterFile <- gsub(tmpscatterFile, pattern = " ", replacement = "_")
print(tmpscatterFile)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
fluidRow(
col(12,
tags$iframe(style="height:600px; width:100%",
src=tmpscatterFile))
)
tmpscatterFile
tags$iframe(style="height:600px; width:100%",
src=tmpscatterFile))
tags$iframe(style="height:600px; width:100%",
src=tmpscatterFile)
col(12,
tags$iframe(style="height:600px; width:100%",
src=tmpscatterFile))
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
# Fixes uiNames into colnames
convertToColnames <- function(uiNameRaw) {
colName <- gsub(uiNameRaw, pattern = " - ", replacement = "_")
colName <- gsub(colName, pattern = " ", replacement = "_")
colName <- gsub(colName, pattern = "(|)", replacement = "")
return(colName)
}
uiNameOne <- "RIF1 (bone - normal)"
cols[3] <- convertToColnames(uiNameOne)
convertToColnames(uiNameOne)
colName <- gsub(colName, pattern = "\\(|\\)", replacement = "")
# Fixes uiNames into colnames
convertToColnames <- function(uiNameRaw) {
colName <- gsub(uiNameRaw, pattern = " - ", replacement = "_")
colName <- gsub(colName, pattern = " ", replacement = "_")
colName <- gsub(colName, pattern = "\\(|\\)", replacement = "")
return(colName)
}
convertToColnames(uiNameOne)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(shiny)
library(plotly)
library(heatmaply)
library(DT)
library(shinyBS)
source("scripts/helpers.R")
library(shinyWidgets)
library(shiny)
library(shinythemes)
library(shinyjs)
# Helper functions for shiny apps
require(RMySQL)
require(DBI)
library(shinyBS)
source("scripts/modules.R")
source("scripts/helpers.R")
# # Load data for the global environment
load("data/geneInfo/HS_basicGeneInfo.RData")
load("data/geneInfo/MM_basicGeneInfo.RData")
load("data/humanTissueOptions.RData")
load("data/mouseTissueOptions.RData")
load("data/symbol_suggestions.RData")
humanGeneOptions <- symbolsFinal$alias_symbol[which(symbolsFinal$species == "hsapiens")]
mouseGeneOptions <- symbolsFinal$alias_symbol[which(symbolsFinal$species == "mmusculus")]
# Create global data object
GlobalData <- list("HS_basicGeneInfo" = HS_basicGeneInfo,
'MM_basicGeneInfo' = MM_basicGeneInfo,
'humanGeneOptions' = humanGeneOptions,
'mouseGeneOptions' = mouseGeneOptions,
'humanTissueOptions' = humanTissueOptions,
'mouseTissueOptions' = mouseTissueOptions
)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
res <- correlationAnalyzeR::analyzeGenePairs(genesOfInterest = c("ATM", "SLC3A2"), crossCompareMode = T)
res <- correlationAnalyzeR::analyzeGenePairs(genesOfInterest = c("ATM", "SLC3A2"), crossCompareMode = T, returnDataOnly = T)
View(res)
compResTPM <- res[["singleGeneCrossCompareResults"]]
geneTPMBoxplot1 <- compResTPM[[1]][["TPM_boxPlot"]]
res <- correlationAnalyzeR::analyzeGenePairs(genesOfInterest = c("ATM", "SLC3A2"), crossCompareMode = T, returnDataOnly = T)geneTPMBoxplot1
geneTPMBoxplot1
print(geneTPMBoxplot1)
View(geneTPMBoxplot1)
res <- correlationAnalyzeR::analyzeGenePairs(genesOfInterest = c("BRCA1", "BRCA1"), crossCompareMode = T, returnDataOnly = T)
View(res)
res[["singleGeneCrossCompareResults"]][["BRCA1"]][["TPM_DF"]]
View(res)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
options(shiny.reactlog=TRUE
)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T, display.mode = "showcase")
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
