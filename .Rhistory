# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
lapply( DBI::dbListConnections( DBI::dbDriver( drv = "MySQL")), DBI::dbDisconnect)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
dev.off()
options(spinner.color="#337AB7")
# Make sure tmp dir exists
if (! dir.exists("www/tmp")) {
dir.create("www/tmp")
}
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
TERM2GENE <- correlationAnalyzeR::getTERM2GENE(GSEA_Type = "complex",
Species = cleanRes$selectedSpecies )
TERM2GENE <- correlationAnalyzeR::getTERM2GENE(GSEA_Type = "complex",
Species = "hsapiens")
View(TERM2GENE)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
getwd()
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
packageurl <- "https://cran.r-project.org/src/contrib/Archive/msigdbr/msigdbr_6.2.1.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
msigdbr::msigdbR()
install.packages(packageurl, repos=NULL, type="source")
mdf <- msigdbr::msigdbr()
View(mdf)
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("ATM"),
returnDataOnly = T, topPlots = F)
View(resList)
clusterProfiler::gseaplot(resList$`ATM, All - Normal`$GSEA$EGMT, geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATIon")
clusterProfiler::gseaplot(resList$`ATM, All - Normal`$GSEA$EGMT, geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATIONO")
clusterProfiler::gseaplot(resList$`ATM, All - Normal`$GSEA$EGMT, geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("ATM"), nperm = 1000,
returnDataOnly = T, topPlots = F)
clusterProfiler::gseaplot(resList$`ATM, All - Normal`$GSEA$EGMT, geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
clusterProfiler::gseaplot(resList$`ATM, All - Normal`$GSEA$EGMT, geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("ATM"), nperm = 1000,
returnDataOnly = T, topPlots = F, sampler = T)
clusterProfiler::gseaplot(resList$`ATM, All - Normal`$GSEA$EGMT, geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
ranks <- resList$correlations$ATM
ranks
names(ranks) <- rownames(resList$correlations)
rans
ranks
ranks <- unique(ranks)
ranks <- resList$correlations$ATM
names(ranks) <- rownames(resList$correlations)
ranks <- unique(names(ranks))
ranks
ranks <- resList$correlations$ATM
names(ranks) <- rownames(resList$correlations)
ranks <- resList$correlations$ATM
names(ranks) <- rownames(resList$correlations)
ranks <- ranks[which(! duplicated(names(ranks)))]
ranks <- resList$correlations$ATM
names(ranks) <- rownames(resList$correlations)
ranks <- ranks[which(! duplicated(names(ranks)))]
ranks <- ranks[which(! is.na(ranks))]
ranks <- ranks[order(ranks, decreasing = TRUE)]
EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(),
maxGSSize = 500, seed = TRUE,
minGSSize = 15,
nPerm = 1000, pvalueCutoff = .05)
clusterProfiler::gseaplot(EGMT,
geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
plt <- clusterProfiler::gseaplot(EGMT,
geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
plt$mapping
plt$theme
plt$theme$plot.margin
plt + theme(plot.margin = margin(t = 0, r = 2, b = 0, l = 0, unit = "pt"))
plt + theme(plot.margin = margin(t = 0, r = 20, b = 0, l = 0, unit = "pt"))
plt + theme(plot.margin = margin(t = 0, r = 20, b = 0, l = 0, unit = "pt"))
plt + ggpubr::rotate_x_text(45)
plt + ggpubr::rotate_x_text(45)
plt + theme(plot.margin = margin(t = 0, r = 20, b = 0, l = 0, unit = "pt"))
plt + theme(plot.margin = margin(t = 0, r = 20, b = 0, l = 0, unit = "pt"),
axis.text.x = element_text(angle = 45, vjust = 1))
resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
returnDataOnly = T, topPlots = F)
ranks <- resList$correlations$Atm
names(ranks) <- rownames(resList$correlations)
ranks <- ranks[which(! duplicated(names(ranks)))]
ranks <- ranks[which(! is.na(ranks))]
ranks <- ranks[order(ranks, decreasing = TRUE)]
EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(),
maxGSSize = 500, seed = TRUE,
minGSSize = 15,
nPerm = 1000, pvalueCutoff = .05)
clusterProfiler::gseaplot(EGMT,
geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(),
maxGSSize = 500, seed = TRUE,
minGSSize = 15,
nPerm = 1000, pvalueCutoff = .15)
clusterProfiler::gseaplot(EGMT,
geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
maxGSSize = 500, seed = TRUE,
minGSSize = 15,
nPerm = 1000, pvalueCutoff = .15)
clusterProfiler::gseaplot(EGMT,
geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
options(shiny.reactlog=TRUE)
runApp(launch.browser = T, display.mode = "normal")
# runApp( display.mode = "showcase")
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
runApp(display.mode = "normal", port = 80,
host = "0.0.0.0", launch.browser = FALSE)
# runApp( display.mode = "showcase")
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
library(profvis)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
# options(shiny.reactlog=TRUE)
runApp(launch.browser = TRUE)
# runApp(display.mode = "normal", port = 80,
#        host = "0.0.0.0", launch.browser = FALSE)
# runApp( display.mode = "showcase")
# resList <- correlationAnalyzeR::analyzeSingleGenes(genesOfInterest = c("Atm"), Species = "mmusculus",
#                                                    returnDataOnly = T, topPlots = F)
# ranks <- resList$correlations$Atm
# names(ranks) <- rownames(resList$correlations)
# ranks <- ranks[which(! duplicated(names(ranks)))]
# ranks <- ranks[which(! is.na(ranks))]
# ranks <- ranks[order(ranks, decreasing = TRUE)]
# EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=correlationAnalyzeR::getTERM2GENE(Species = "mmusculus"),
#                               maxGSSize = 500, seed = TRUE,
#                               minGSSize = 15,
#                               nPerm = 1000, pvalueCutoff = .05)
# clusterProfiler::gseaplot(EGMT,
#                           geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION")
# profvis(prof_output = "profFile.html",{
#   runApp(launch.browser = T)
#
# })
