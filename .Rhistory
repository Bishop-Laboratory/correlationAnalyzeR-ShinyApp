'mouseTissueOptions' = mouseTissueOptions
)
# Bug testing
geneOne <- "ATM"
tissueTypeOne <- "brain"
sampleTypeOne <- "normal"
geneTwo <- "SLC3A2"
tissueTypeTwo <- "brain"
sampleTypeTwo <- "normal"
species <- "Human"
gseaType <- "Simple"
cleanResOne <- cleanInputs(primaryGene = geneOne,
selectedSpecies = species,
sampleType = sampleTypeOne,
tissueType = tissueTypeOne,
GlobalData = GlobalData,
session = session)
cleanResTwo <- cleanInputs(primaryGene = geneTwo,
selectedSpecies = species,
sampleType = sampleTypeTwo,
tissueType = tissueTypeTwo,
GlobalData = GlobalData,
session = session)
genesOfInterest <- c(cleanResOne$primaryGene, cleanResTwo$primaryGene)
Sample_Type <- c(cleanResOne$sampleType, cleanResTwo$sampleType)
Tissue <- c(cleanResOne$tissueType, cleanResTwo$tissueType)
gseaType <- tolower(gseaType)
runGSEA <- ifelse(test = gseaType == "none", yes = FALSE, no = TRUE)
pairedRes <- correlationAnalyzeR::analyzeGenePairs(genesOfInterest = genesOfInterest,
Sample_Type = Sample_Type,
Tissue = Tissue,
Species = cleanResOne$selectedSpecies,
GSEA_Type = gseaType,
returnDataOnly = T,
topPlots = F,
runGSEA = runGSEA)
View(pairedRes)
pairedRes[["compared"]][["correlationPlot"]]
pairedRes[["compared"]][["correlationVarianceHeatmap"]]
pairedRes[["compared"]][["correlatedPathwaysHeatmap"]]
data <- pairedRes$compared$correlations
data <- cbind(rownames(data), data)
colnames(data)[1] <- "geneName"
# data <- data[which(data[,1] != cleanRes$primaryGene),]
rownames(data) <- NULL
data <- merge(x = cleanResOne$basicGeneInfo, y = data, by = "geneName")
View(data)
pairedRes[["processedCorrelationsFrame"]] <- data
View(pairedRes)
dataList <- pairedRes
correlations <- dataList[["processedCorrelationsFrame"]]
corrPlot <- dataList[["compared"]][["correlationPlot"]]
corrPlot
heatPaths <- pairedRes[["compared"]][["correlatedPathaysHeatmap"]]
heatGenes <- pairedRes[["compared"]][["correlationVarianceHeatmap"]]
corrPlot <- pairedRes[["compared"]][["correlationPlot"]]
if (species == "Human") {
GeneInfo <- GlobalData$HS_basicGeneInfo
} else {
GeneInfo <- GlobalData$MM_basicGeneInfo
}
uiNameOne <- paste0(geneOne, " (",
tissueTypeOne, " - ",
sampleTypeOne, ")")
fileNameOne <- paste0(geneOne, "_",
tissueTypeOne, "_",
sampleTypeOne)
uiNameTwo <- paste0(geneTwo, " (",
tissueTypeTwo, " - ",
sampleTypeTwo, ")")
fileNameTwo <- paste0(geneTwo, "_",
tissueTypeTwo, "_",
sampleTypeTwo)
uiNameOne
longName <- ifelse((tissueTypeOne != tissueTypeTwo |
sampleTypeOne != sampleTypeTwo),
yes = T, no = F)
uiName <- paste0(geneOne, " vs ", geneTwo,
tissueTypeTwo, " - ",
sampleTypeTwo, ")")
uiname
uiName
fileName <- paste0(geneOne, "_vs_", geneTwo, "_",
tissueTypeTwo, "_",
sampleTypeTwo)
uiName <- paste0(uiNameOne, " vs ", uiNameTwo)
uiName
fileName <- paste0(fileNameOne, "_vs_", fileNameTwo)
fileName
longName <- ifelse((tissueTypeOne != tissueTypeTwo |
sampleTypeOne != sampleTypeTwo),
yes = T, no = F)
if (longName) {
uiNameOne <- paste0(geneOne, " (",
tissueTypeOne, " - ",
sampleTypeOne, ")")
fileNameOne <- paste0(geneOne, "_",
tissueTypeOne, "_",
sampleTypeOne)
uiNameTwo <- paste0(geneTwo, " (",
tissueTypeTwo, " - ",
sampleTypeTwo, ")")
fileNameTwo <- paste0(geneTwo, "_",
tissueTypeTwo, "_",
sampleTypeTwo)
uiName <- paste0(uiNameOne, " vs ", uiNameTwo)
fileName <- paste0(fileNameOne, "_vs_", fileNameTwo)
} else {
uiName <- paste0(geneOne, " vs ", geneTwo, "(",
tissueTypeTwo, " - ",
sampleTypeTwo, ")")
fileName <- paste0(geneOne, "_vs_", geneTwo, "_",
tissueTypeTwo, "_",
sampleTypeTwo)
}
correlatedPathwaysDF <- pairedRes[["compared"]][["correlatedPathwaysDataFrame"]]
View(correlatedPathwaysDF)
View(correlations)
# Setup dataframe to match plotly data
corrValDF <- correlations
View(corrValDF)
corrValDF <- corrValDF[,c(1, 3:7)]
corrValDF <- unique(corrValDF)
corrValDF <- corrValDF[order(corrValDF$variance, decreasing = T),]
corrValDF <- corrValDF[which(! corrValDF$geneName %in% colnames(corrValDF)),]
rownames(corrValDF) <- NULL
corrValDF <- unique(corrValDF)
corrPlot
View(heatGenes)
correlations <- pairedRes[["processedCorrelationsFrame"]]
corrPlot <- pairedRes[["compared"]][["correlationPlot"]]
heatGenes <- pairedRes[["compared"]][["correlationVarianceHeatmap"]]
heatPaths <- pairedRes[["compared"]][["correlatedPathaysHeatmap"]]
correlatedPathwaysDF <- pairedRes[["compared"]][["correlatedPathwaysDataFrame"]]
heatPaths <- pairedRes[["compared"]][["correlatedPathwaysHeatmap"]]
heatPaths
View(correlatedPathwaysDF)
# Setup dataframe to match plotly data
correlatedPathwaysDT <- correlatedPathwaysDF[,c(1, 2, 6, 10, 11)]
View(correlatedPathwaysDT)
correlatedPathwaysDT <- unique(correlatedPathwaysDT)
correlatedPathwaysDT <- correlatedPathwaysDT[order(correlatedPathwaysDT$variance,
decreasing = T),]
correlatedPathwaysDT <- correlatedPathwaysDT[order(correlatedPathwaysDT$NES_variance,
decreasing = T),]
# Setup dataframe to match plotly data
corrValDF <- correlations
corrValDF <- corrValDF[,c(1, 3:7)]
corrValDF <- unique(corrValDF)
corrValDF <- corrValDF[order(corrValDF$variance, decreasing = T),]
corrValDF <- corrValDF[which(! corrValDF$geneName %in% colnames(corrValDF)),]
rownames(corrValDF) <- NULL
corrValDF
head(corrPathDFReact)
head(corrValDF)
# Setup dataframe to match plotly data
correlatedPathwaysDT <- correlatedPathwaysDF[,c(1, 2, 6, 10, 11)]
correlatedPathwaysDT <- correlatedPathwaysDT[order(correlatedPathwaysDT$NES_variance,
decreasing = T),]
cols <- colnames(correlatedPathwaysDT)
cols
cols[1] <- "Pathway"
cols
cols <- gsub(x = cols, pattern = "_", replacement = " ")
colas
cols
cols <- gsub(x = cols, pattern = "NES", replacement = "Enrichment")
cols
uiNameOne <- paste0(geneOne, " (",
tissueTypeOne, " - ",
sampleTypeOne, ")")
fileNameOne <- paste0(geneOne, "_",
tissueTypeOne, "_",
sampleTypeOne)
uiNameTwo <- paste0(geneTwo, " (",
tissueTypeTwo, " - ",
sampleTypeTwo, ")")
fileNameTwo <- paste0(geneTwo, "_",
tissueTypeTwo, "_",
sampleTypeTwo)
if (longName) {
uiName <- paste0(uiNameOne, " vs ", uiNameTwo)
fileName <- paste0(fileNameOne, "_vs_", fileNameTwo)
} else {
uiName <- paste0(geneOne, " vs ", geneTwo, "(",
tissueTypeTwo, " - ",
sampleTypeTwo, ")")
fileName <- paste0(geneOne, "_vs_", geneTwo, "_",
tissueTypeTwo, "_",
sampleTypeTwo)
}
uiNameOne
cols <- gsub(x = cols, pattern = geneOne,
replacement = uiNameOne)
cols
cols <- gsub(x = cols, pattern = geneTwo,
replacement = uiNameTwo)
cols
cols <- colnames(correlatedPathwaysDT)
cols[1] <- "Pathway"
cols <- gsub(x = cols, pattern = "_", replacement = " ")
cols <- gsub(x = cols, pattern = "NES ", replacement = "")
cols <- gsub(x = cols, pattern = geneOne,
replacement = uiNameOne)
cols <- gsub(x = cols, pattern = geneTwo,
replacement = uiNameTwo)
cols
cols[c(4:5)] <- tools::toTitleCase(cols[c(4:5)])
cols
View(corrValDF)
createGSEAInfoLink(correlatedPathwaysDT[,1])
eres <- correlatedPathwaysDT
cols <- colnames(eres)
cols[1] <- "Pathway"
cols <- gsub(x = cols, pattern = "_", replacement = " ")
cols <- gsub(x = cols, pattern = "NES ", replacement = "")
cols <- gsub(x = cols, pattern = geneOne,
replacement = uiNameOne)
cols <- gsub(x = cols, pattern = geneTwo,
replacement = uiNameTwo)
cols[c(4:5)] <- tools::toTitleCase(cols[c(4:5)])
eres <- eres[order(eres[,5], decreasing = T),]
View(eres)
eres[,c(2:5)] <- apply(eres[,c(2:5)], 1:2, round, digits = 4)
eresTitles <- eres$ID
eresTitles <- gsub(eresTitles, pattern = "_", replacement = " ")
eresTitles <- tolower(eresTitles)
eresTitles <- tools::toTitleCase(text = eresTitles)
eresTitles[which(nchar(eresTitles) > 45)] <- paste0(substr(eresTitles[which(nchar(eresTitles) > 45)],
1, 41), "...")
eresTitles
# Replace gene name with HTML to call gene info modal
eres$ID <- createGSEAInfoLink(val = eres[,1],
valTitle = eresTitles)
View(eres)
cols
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
# Generate tissue option lists
tissues <- unique(
gsub(
correlationAnalyzeR::getTissueTypes('hsapiens'),
pattern = " - .+", replacement = ""
)
)
humanTissueOptions <- list()
for (i in 1:length(tissues)) {
tissue <- tissues[i]
ll <- correlationAnalyzeR::getTissueTypes('hsapiens')
ll <- ll[grep(pattern = tissue, x = ll)]
ll <- gsub(pattern = ".+ - ", x = ll, replacement = "")
humanTissueOptions[[i]] <- ll
names(humanTissueOptions)[i] <- tissue
}
tissues <- unique(
gsub(
correlationAnalyzeR::getTissueTypes('mmusculus'),
pattern = " - .+", replacement = ""
)
)
mouseTissueOptions <- list()
for (i in 1:length(tissues)) {
tissue <- tissues[i]
ll <- correlationAnalyzeR::getTissueTypes('mmusculus')
ll <- ll[grep(pattern = tissue, x = ll)]
ll <- gsub(pattern = ".+ - ", x = ll, replacement = "")
mouseTissueOptions[[i]] <- ll
names(mouseTissueOptions)[i] <- tissue
}
humanTissueOptions
save(humanTissueOptions, file = "data/humanTissueOptions.RData")
save(mouseTissueOptions, file = "data/mouseTissueOptions.RData")
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
round(digits = )
signif()
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
?selectInput
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(ggpubr)
data <- data.frame(
"E2:Dox-" = c(0, 5, 15, 30, 35, 37),
"E2:Dox+" = c(0, 1, 5, 5, 6, 6),
"Veh:Dox-" = c(0, 1, 1, 0, 2, 0),
"Veh:Dox+" = c(1, 0, 1, 1, 0, 1)
)
View(data)
data <- data.frame(
"E2:Dox-" = c(0, 5, 15, 30, 35, 37),
"E2:Dox+" = c(0, 1, 5, 5, 6, 6),
"Veh:Dox-" = c(0, 1, 1, 0, 2, 0),
"Veh:Dox+" = c(1, 0, 1, 1, 0, 1)
"Time" = c(0, .5, 1, 1.5, 2, 2.5)
)
data <- data.frame(
"E2:Dox-" = c(0, 5, 15, 30, 35, 37),
"E2:Dox+" = c(0, 1, 5, 5, 6, 6),
"Veh:Dox-" = c(0, 1, 1, 0, 2, 0),
"Veh:Dox+" = c(1, 0, 1, 1, 0, 1),
"Time" = c(0, .5, 1, 1.5, 2, 2.5)
)
library(dplyr)
data %>% gather()
library(tidyr)
data %>% gather()
t(data) %>% gather()
as.data.frame(t(data)) %>% gather()
as.data.frame(t(data))
data %>% gather()
data <- data.frame(
"E2:Dox-" = c(0, 5, 15, 30, 35, 37),
"E2:Dox+" = c(0, 1, 5, 5, 6, 6),
"Veh:Dox-" = c(0, 1, 1, 0, 2, 0),
"Veh:Dox+" = c(1, 0, 1, 1, 0, 1),
"Time" = c(0, .5, 1, 1.5, 2, 2.5)
)
View(data)
data <- data.frame(
"E2_nDox" = c(0, 5, 15, 30, 35, 37),
"E2_pDox" = c(0, 1, 5, 5, 6, 6),
"Veh_nDox" = c(0, 1, 1, 0, 2, 0),
"Veh_pDox" = c(1, 0, 1, 1, 0, 1),
"Time" = c(0, .5, 1, 1.5, 2, 2.5)
)
data %>% gather(Time)
data %>% gather(Condition)
data %>% gather(Time)
data2 <- data %>% gather(Time)
View(data2)
colnames(data2)[1] <- "Condition"
data2$Condition <- gsub(data2$Condition, pattern = "_", replacement = " ")
data2$Condition <- gsub(data2$Condition, pattern = "n", replacement = "-")
data2$Condition <- gsub(data2$Condition, pattern = "p", replacement = "+")
data2$Time <- rep(c(0, .5, 1, 1.5, 2, 2.5), 4)
ggline(data2, x = "Time", y = "value", group = "Condition")
ggline(data2, x = "Time",
y = "value",
group = "Condition", color = "Condition")
ggline(data2, x = "Time",
y = "value",
group = "Condition", color = "Condition", ylab = "Normalized Expression")
ggline(data2, x = "Time",
y = "value", legend = "right",
group = "Condition", color = "Condition", ylab = "Normalized Expression")
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
# Generate tissue option lists
tissues <- unique(
gsub(
correlationAnalyzeR::getTissueTypes('hsapiens'),
pattern = " - .+", replacement = ""
)
)
humanTissueOptions <- list()
for (i in 1:length(tissues)) {
tissue <- tissues[i]
ll <- correlationAnalyzeR::getTissueTypes('hsapiens')
ll <- ll[grep(pattern = tissue, x = ll)]
ll <- gsub(pattern = ".+ - ", x = ll, replacement = "")
humanTissueOptions[[i]] <- ll
names(humanTissueOptions)[i] <- tissue
}
tissues <- unique(
gsub(
correlationAnalyzeR::getTissueTypes('mmusculus'),
pattern = " - .+", replacement = ""
)
)
mouseTissueOptions <- list()
for (i in 1:length(tissues)) {
tissue <- tissues[i]
ll <- correlationAnalyzeR::getTissueTypes('mmusculus')
ll <- ll[grep(pattern = tissue, x = ll)]
ll <- gsub(pattern = ".+ - ", x = ll, replacement = "")
mouseTissueOptions[[i]] <- ll
names(mouseTissueOptions)[i] <- tissue
}
save(humanTissueOptions, file = "data/humanTissueOptions.RData")
save(mouseTissueOptions, file = "data/mouseTissueOptions.RData")
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
mTisOpt <- names(mouseTissueOptions)[order(names(mouseTissueOptions))]
mTisOpt <- gsub(mTisOpt, pattern = "0", replacement = " ")
mTisOpt
mTisOpt <- tools::toTitleCase(mTisOpt)
mTisOpt
mTisOpt[which(mTisOpt == "all")]
mTisOpt[which(mTisOpt == "all")] <- "All"
mTisOpt
hTisOpt <- names(humanTissueOptions)[order(names(humanTissueOptions))]
hTisOpt <- gsub(hTisOpt, pattern = "0", replacement = " ")
hTisOpt <- tools::toTitleCase(hTisOpt)
hTisOpt[which(hTisOpt == "all")] <- "All"
hTisOpt
View(mouseTissueOptions)
?selectizeInput
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
correlationAnalyzeR::getTissueTypes()
library(correlationAnalyzeR)
library(shiny)
# getCorrelationData(geneList = "ATM", Sample_Type = "Normal_Tissues", Species = "hsapiens")
getwd()
runApp(launch.browser = T)
